<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">

	<bean id="dataSourceMaster" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<property name="poolName" value="springHikariCP" />
		<property name="connectionTestQuery" value="SELECT 1" />
		<property name="dataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlDataSource" />
		<property name="dataSourceProperties">
			<props>
				<prop key="url">${spring.datasource.url}</prop>
				<prop key="user">${spring.datasource.username}</prop>
				<prop key="password">${spring.datasource.password}</prop>
				<prop key="cachePrepStmts">true</prop>
				<prop key="prepStmtCacheSize">250</prop>
				<prop key="prepStmtCacheSqlLimit">2048</prop>
				<prop key="useServerPrepStmts">true</prop>
			</props>
		</property>
	</bean>
	<bean id="dataSourceSlave" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<property name="poolName" value="springHikariCP" />
		<property name="connectionTestQuery" value="SELECT 1" />
		<property name="dataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlDataSource" />
		<property name="dataSourceProperties">
			<props>
				<prop key="url">${spring.datasource.url.slave}</prop>
				<prop key="user">${spring.datasource.username.slave}</prop>
				<prop key="password">${spring.datasource.password.slave}</prop>
				<prop key="cachePrepStmts">true</prop>
				<prop key="prepStmtCacheSize">250</prop>
				<prop key="prepStmtCacheSqlLimit">2048</prop>
				<prop key="useServerPrepStmts">true</prop>
			</props>
		</property>
	</bean>
	<!-- group 1, default -->
	<bean id="metads" class="heracles.data.datasource.ReadWriteDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="write" value-ref="dataSourceMaster" />
				<entry key="read01" value-ref="dataSourceSlave" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSourceMaster" />
		<property name="dataSourceKey" ref="readWriteDataSourceKey1" />
	</bean>

	<bean id="readWriteDataSourceKey1" class="heracles.data.datasource.ReadWriteDataSourceKey">
		<property name="readDateSources">
			<map key-type="java.lang.String">
				<entry key="read01" value="read01" />
			</map>
		</property>
		<property name="writeKey">
			<value>write</value>
		</property>
		<!-- <property name="alwaysReplaceExist" value="false" /> -->
		<property name="strategy" ref="roundRobinLoadBalanceStrategy1" />
	</bean>

	<bean id="roundRobinLoadBalanceStrategy1"
		class="heracles.data.datasource.strategy.RoundRobinLoadBalanceStrategy">
		<constructor-arg>
			<map key-type="java.lang.String" value-type="java.lang.Integer">
				<entry key="read01" value="1" />
			</map>
		</constructor-arg>
	</bean>

<!-- 数据源 -->
	<bean id="dataSource" class="heracles.data.datasource.RepositoryShardingDataSource"
		primary="true">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="metads" value-ref="metads" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="metads" />
	</bean>
<!-- 事务相关配置 -->
	<bean id="transactionManager"
		class="heracles.data.datasource.SmartDataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributeSource">
			<bean
				class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" />
		</property>
	</bean>
	<bean id="transactionAttributeSourceAdvisor"
		class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor" ref="transactionInterceptor" />
	</bean>


	<bean id="annotationReadWriteDataSourceInterceptor"
		class="heracles.data.datasource.interceptor.AnnotationReadWriteDataSourceInterceptor">
		<property name="readWriteDataSourceKeys">
			<map key-type="java.lang.String">
				<entry key="metads" value-ref="readWriteDataSourceKey1" />
			</map>
		</property>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
 

	<bean id="shardingPlugin" class="heracles.data.mybatis.plugin.ShardingPlugin">
		<property name="sqlConverter" ref="sqlConverter" />
	</bean>
	
	<bean id="sqlConverter" class="heracles.data.mybatis.converter.DefaultSqlConverter" />
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 配置扫描Mapper XML的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
		<property name="plugins">
			<array>
				<ref bean="shardingPlugin" />
			</array>
		</property>
	</bean>
	
	
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*ServiceImpl</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>annotationReadWriteDataSourceInterceptor</value>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	<!-- 配置扫描Mapper接口的包路径 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="cn.rongcapital.caas.dao" />
	</bean>


</beans>